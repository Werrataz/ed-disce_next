
1. Ecrire le code pour les pages course/management
2. Faire la page d'accueil et le layout avec le menu
3. Faire la page de prise de note de cours, avec la nouvelle architecture en Knowledge
(Concernant le 3., créer une architecture avec des Knowledges en background ou non ?)
4. Concernant la page sur les flashcards, à voir si on créé une nouvelle version ou non
-- Au niveau background, il faudra probablement faire en sorte que les gets ne renvoient plus que les cours et flashcards de l'utilisateur --
5. Faire le css de l'ensemble (en réutilisant éventuellement le css de l'autre application)
6. Lier les deux appications (attention, il faudra probablement utiliser des balises <a> du coup, et pas des balises <Link>)


Gérer les menus de gauche (qui risquent d'afficher des choses différentes en fonction de la page)
Le plus pertienent serait de créer un composant qui affiche une liste qu'on lui fourni en entrée
Il faudra ensuite générer la liste et gérer les requêtes dans chaque générateurs de menu
Enfin, il faudra faire attention aux liens (chaque élément doit déclancher un évènement au clic. Il faudra pouvoir personnaliser l'évenement. 
-> Plus exactement l'évenement est une redirection mais il faut personnaliser la redirection.
La solution pourrait être de fournir la base de l'url en argument du composant également.)

Notes du 18 août au soir : 
Pour la page connection, il faudrait créer tout les écouteurs d'évenement
Ensuite il restera à tester pour vérifier que tout fonctionne bien, et à faire la gestion d'erreur éventuellement
(Il faudra également gérer les tokens de connection -> Idée : juste faire qu'on ne vérifie pour l'instant que le token de connection rapide, et que s'il n'est plus valide, on demannde à l'utilisateur de se reconnecter)
Concrétement, pour chaque page, si la requête renvoie que le token est invalide, on redirect vers la page de connection en gros

Notes du 19 aout au soir : 
Il y a un problème dans une requête de création de cours pour la page notes/new
Tester avec des requêtes envoyées depuis d'autres sources (et sinon retester directement par ce que c'est peut-être un CORS Policy)


Il faut également faire en sorte que le menu ne s'affiche pas sur la page de connexion
La solution simple : mettre la page de connexion à la racine, et rebasculer toutes les autres pages dans un dossier (éventuellement masqué) avec un layout


Notes pour le fichier course.js : 
  // Créer ici une variable qui sauvegarde la valeur de la balise active
  // La balise active est celle dans laquelle est présent le curseur de l'utilisateur
  // Il n'y a pas forcement de balise active, mais si il y en a une, alors elle est la seule à être active
  // La balise active hérite de deux effets : Si l'utilisateur appuie
  // deux fois de suite sur Space, alors on ajoute une balise juste après la balise active et on place le curseur dans cette balise, qui devient la nouvelle balise active
  // Si l'utilisateur appuis sur backspace alors que la balise active est vide, alors on supprime la balise active
  // Reréfléchir à cette structure en la comparant à celle que j'ai tenté d'implémenter pour l'instant
  //
  // Ensuite enchainer rapidement sur la page de l'architecture des flashcards (celle pour les faire afficher) et sur la révision des flashcards ensuite



J'étais en train de regarder comment refaire l'éditeur Quill
J'ai trouvé la bibliothéque du mec qui a fait l'autre truc : 
https://justamouse.com/mathquill4quill/reactjs/
J'essaye d'utiliser le code du github qui est ici : https://github.com/c-w/mathquill4quill
J'ai commencé à modifier le code dans Editor.js, poursuivre pour voir ce que je peux en faire

